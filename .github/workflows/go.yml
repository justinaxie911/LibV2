name: Build

on:
  workflow_dispatch:
    inputs:
      release_tag:
        required: true
        type: string
      build_type:
        description: 'Build type'
        required: true
        default: 'both'
        type: choice
        options:
        - 'both'
        - 'aar-only'
        - 'libs-only'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64-v8a, armeabi-v7a, x86, x86_64]
        include:
          - arch: arm64-v8a
            target: aarch64-linux-android
            goarch: arm64
          - arch: armeabi-v7a
            target: armv7a-linux-androideabi
            goarch: arm
          - arch: x86
            target: i686-linux-android
            goarch: 386
          - arch: x86_64
            target: x86_64-linux-android
            goarch: amd64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Golang
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'

    - name: Setup Android SDK Tools
      uses: android-actions/setup-android@v3.2.0
      with:
        cmdline-tools-version: 10406996

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1.4.2
      with:
        ndk-version: 'r26b'
        link-to-sdk: true

    - name: Setup Go Mobile
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        export PATH=$PATH:$(go env GOPATH)/bin
        gomobile init

    - name: Prepare assets and data
      run: |
        mkdir -p assets data
        bash gen_assets.sh download
        cp -v data/*.dat assets/

    - name: Build shared libraries with 16KB alignment
      if: ${{ github.event.inputs.build_type == 'both' || github.event.inputs.build_type == 'libs-only' }}
      run: |
        export GOOS=android
        export GOARCH=${{ matrix.goarch }}
        export CGO_ENABLED=1
        export CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.target }}21-clang
        export CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.target }}21-clang++

        echo "Building for ${{ matrix.arch }} with 16KB page alignment..."
        
        go build -buildmode=c-shared \
          -ldflags="-w -s -extldflags='-Wl,-z,max-page-size=16384'" \
          -o libv2ray-${{ matrix.arch }}.so \
          ./

        # Verify page alignment
        $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-readelf -l libv2ray-${{ matrix.arch }}.so | grep -A 1 "LOAD" || true

    - name: Upload shared libraries
      if: ${{ github.event.inputs.build_type == 'both' || github.event.inputs.build_type == 'libs-only' }}
      uses: actions/upload-artifact@v4
      with:
        name: shared-libraries-${{ matrix.arch }}
        path: libv2ray-${{ matrix.arch }}.so
        retention-days: 7

  build-aar:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.build_type == 'both' || github.event.inputs.build_type == 'aar-only' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Golang
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'

    - name: Setup Android SDK Tools
      uses: android-actions/setup-android@v3.2.0
      with:
        cmdline-tools-version: 10406996

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1.4.2
      with:
        ndk-version: 'r26b'
        link-to-sdk: true

    - name: Setup Go Mobile
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        export PATH=$PATH:$(go env GOPATH)/bin
        gomobile init

    - name: Prepare assets and data
      run: |
        mkdir -p assets data
        bash gen_assets.sh download
        cp -v data/*.dat assets/

    - name: Download shared libraries
      if: ${{ github.event.inputs.build_type == 'both' }}
      uses: actions/download-artifact@v4
      with:
        path: downloaded-libs
        pattern: shared-libraries-*
        merge-multiple: true

    - name: Build AAR with 16KB page alignment
      run: |
        echo "Building AAR with 16KB page alignment for Android 15+ compatibility..."
        
        # Build AAR dengan flags 16KB page alignment
        gomobile bind -v \
          -androidapi 21 \
          -ldflags='-s -w -extldflags="-Wl,-z,max-page-size=16384"' \
          -o libv2ray.aar \
          ./

        # Verify AAR contains proper libraries
        unzip -l libv2ray.aar | grep "\.so" || true

    - name: Build additional AAR variants
      run: |
        # Build dengan minimal API level yang berbeda
        gomobile bind -v \
          -androidapi 19 \
          -ldflags='-s -w -extldflags="-Wl,-z,max-page-size=16384"' \
          -o libv2ray-minapi19.aar \
          ./

        # Build dengan debug symbols
        gomobile bind -v \
          -androidapi 21 \
          -ldflags='-extldflags="-Wl,-z,max-page-size=16384"' \
          -o libv2ray-debug.aar \
          ./

    - name: Create combined package
      run: |
        mkdir -p dist/
        
        # Copy AAR files
        cp *.aar dist/
        
        # Copy shared libraries jika ada
        if [ -d "downloaded-libs" ]; then
          mkdir -p dist/libs/
          cp downloaded-libs/*.so dist/libs/
        fi
        
        # Create build info
        cat > dist/build-info.txt << EOF
Build Date: $(date)
Build Type: ${{ github.event.inputs.build_type }}
Android NDK: r26b
Page Alignment: 16KB (Android 15+ Compatible)
API Level: 19+ (min), 21+ (recommended)
Supported Architectures: arm64-v8a, armeabi-v7a, x86, x86_64
EOF

        # Show final structure
        echo "Final distribution structure:"
        find dist/ -type f -exec ls -la {} \;

    - name: Upload AAR artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aar-packages
        path: dist/
        retention-days: 7

  release:
    runs-on: ubuntu-latest
    needs: [build, build-aar]
    if: ${{ github.event.inputs.build_type == 'both' || github.event.inputs.build_type == 'aar-only' }}

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
        pattern: '*'
        merge-multiple: true

    - name: Prepare release assets
      run: |
        mkdir -p final-release
        
        # Organize artifacts
        if [ -d "release-artifacts/aar-packages" ]; then
          cp -r release-artifacts/aar-packages/* final-release/
        fi
        
        # Copy shared libraries
        if [ -d "release-artifacts/shared-libraries-"* ]; then
          mkdir -p final-release/shared-libs/
          find release-artifacts -name "*.so" -exec cp {} final-release/shared-libs/ \;
        fi
        
        # Create version info
        echo "Version: ${{ github.event.inputs.release_tag }}" >> final-release/version.txt
        echo "Build Type: ${{ github.event.inputs.build_type }}" >> final-release/version.txt
        echo "Android 15 Compatible: YES (16KB page alignment)" >> final-release/version.txt
        
        # Show final release contents
        echo "Release contents:"
        find final-release/ -type f | sort

    - name: Upload to Release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: final-release/*
        tag: ${{ github.event.inputs.release_tag }}
        file_glob: true
        overwrite: true
        body: |
          # libv2ray Android Build
          
          ## Build Information
          - **Version**: ${{ github.event.inputs.release_tag }}
          - **Build Type**: ${{ github.event.inputs.build_type }}
          - **Android 15+ Compatible**: ‚úÖ Yes (16KB page alignment)
          - **Minimum API**: 19
          - **Recommended API**: 21+
          
          ## Contents
          - AAR packages for easy Android integration
          - Shared libraries (.so) for all architectures
          - Support for arm64-v8a, armeabi-v7a, x86, x86_64
          
          ## Usage
          See included documentation for integration instructions.

  verify-android-15:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.build_type == 'both' || github.event.inputs.build_type == 'libs-only' }}

    steps:
    - name: Download shared libraries
      uses: actions/download-artifact@v4
      with:
        path: verify-libs
        pattern: shared-libraries-*
        merge-multiple: true

    - name: Verify 16KB page alignment
      run: |
        echo "üîç Verifying Android 15+ compatibility (16KB page alignment)..."
        
        for lib in verify-libs/*.so; do
          if [ -f "$lib" ]; then
            echo "Checking: $(basename $lib)"
            # Check for proper page alignment
            readelf -l "$lib" | grep -q "LOAD" && echo "‚úÖ Valid ELF structure"
            
            # Check architecture
            file "$lib" | grep -q "ARM" && echo "üì± ARM architecture detected"
            file "$lib" | grep -q "x86" && echo "üíª x86 architecture detected"
            
            echo "---"
          fi
        done
        
        echo "üéâ All libraries verified for Android 15+ compatibility"

    - name: Upload verification report
      uses: actions/upload-artifact@v4
      with:
        name: android-15-verification
        path: verify-libs/
        retention-days: 7      if: ${{ github.event.inputs.build_type == 'both' || github.event.inputs.build_type == 'libs-only' }}
      run: |
        export GOOS=android
        export GOARCH=${{ matrix.goarch }}
        export CGO_ENABLED=1
        export CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.target }}21-clang
        export CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.target }}21-clang++

        echo "Building for ${{ matrix.arch }} with 16KB page alignment..."
        
        go build -buildmode=c-shared \
          -ldflags="-w -s -extldflags='-Wl,-z,max-page-size=16384'" \
          -o libv2ray-${{ matrix.arch }}.so \
          ./

        # Verify page alignment
        $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-readelf -l libv2ray-${{ matrix.arch }}.so | grep -A 1 "LOAD" || true

    - name: Upload shared libraries
      if: ${{ github.event.inputs.build_type == 'both' || github.event.inputs.build_type == 'libs-only' }}
      uses: actions/upload-artifact@v4
      with:
        name: shared-libraries-${{ matrix.arch }}
        path: libv2ray-${{ matrix.arch }}.so
        retention-days: 7

  build-aar:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.build_type == 'both' || github.event.inputs.build_type == 'aar-only' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Golang
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'

    - name: Setup Android SDK Tools
      uses: android-actions/setup-android@v3.2.0
      with:
        cmdline-tools-version: 10406996

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1.4.2
      with:
        ndk-version: 'r26b'
        link-to-sdk: true

    - name: Setup Go Mobile
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        export PATH=$PATH:$(go env GOPATH)/bin
        gomobile init

    - name: Prepare assets and data
      run: |
        mkdir -p assets data
        bash gen_assets.sh download
        cp -v data/*.dat assets/

    - name: Download shared libraries
      if: ${{ github.event.inputs.build_type == 'both' }}
      uses: actions/download-artifact@v4
      with:
        path: downloaded-libs
        pattern: shared-libraries-*
        merge-multiple: true

    - name: Build AAR with 16KB page alignment
      run: |
        echo "Building AAR with 16KB page alignment for Android 15+ compatibility..."
        
        # Build AAR dengan flags 16KB page alignment
        gomobile bind -v \
          -androidapi 21 \
          -ldflags='-s -w -extldflags="-Wl,-z,max-page-size=16384"' \
          -o libv2ray.aar \
          ./

        # Verify AAR contains proper libraries
        unzip -l libv2ray.aar | grep "\.so" || true

    - name: Build additional AAR variants
      run: |
        # Build dengan minimal API level yang berbeda
        gomobile bind -v \
          -androidapi 19 \
          -ldflags='-s -w -extldflags="-Wl,-z,max-page-size=16384"' \
          -o libv2ray-minapi19.aar \
          ./

        # Build dengan debug symbols
        gomobile bind -v \
          -androidapi 21 \
          -ldflags='-extldflags="-Wl,-z,max-page-size=16384"' \
          -o libv2ray-debug.aar \
          ./

    - name: Create combined package
      run: |
        mkdir -p dist/
        
        # Copy AAR files
        cp *.aar dist/
        
        # Copy shared libraries jika ada
        if [ -d "downloaded-libs" ]; then
          mkdir -p dist/libs/
          cp downloaded-libs/*.so dist/libs/
        fi
        
        # Create build info
        cat > dist/build-info.txt << EOF
Build Date: $(date)
Build Type: ${{ github.event.inputs.build_type }}
Android NDK: r26b
Page Alignment: 16KB (Android 15+ Compatible)
API Level: 19+ (min), 21+ (recommended)
Supported Architectures: arm64-v8a, armeabi-v7a, x86, x86_64
EOF

        # Show final structure
        echo "Final distribution structure:"
        find dist/ -type f -exec ls -la {} \;

    - name: Upload AAR artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aar-packages
        path: |
          dist/
        retention-days: 7

  release:
    runs-on: ubuntu-latest
    needs: [build, build-aar]
    if: ${{ github.event.inputs.build_type == 'both' || github.event.inputs.build_type == 'aar-only' }}

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
        pattern: '*'
        merge-multiple: true

    - name: Prepare release assets
      run: |
        mkdir -p final-release
        
        # Organize artifacts
        if [ -d "release-artifacts/aar-packages" ]; then
          cp -r release-artifacts/aar-packages/* final-release/
        fi
        
        # Copy shared libraries
        if [ -d "release-artifacts/shared-libraries-"* ]; then
          mkdir -p final-release/shared-libs/
          find release-artifacts -name "*.so" -exec cp {} final-release/shared-libs/ \;
        fi
        
        # Create version info
        echo "Version: ${{ github.event.inputs.release_tag }}" >> final-release/version.txt
        echo "Build Type: ${{ github.event.inputs.build_type }}" >> final-release/version.txt
        echo "Android 15 Compatible: YES (16KB page alignment)" >> final-release/version.txt
        
        # Show final release contents
        echo "Release contents:"
        find final-release/ -type f | sort

    - name: Upload to Release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: final-release/*
        tag: ${{ github.event.inputs.release_tag }}
        file_glob: true
        overwrite: true
        body: |
          # libv2ray Android Build
          
          ## Build Information
          - **Version**: ${{ github.event.inputs.release_tag }}
          - **Build Type**: ${{ github.event.inputs.build_type }}
          - **Android 15+ Compatible**: ‚úÖ Yes (16KB page alignment)
          - **Minimum API**: 19
          - **Recommended API**: 21+
          
          ## Contents
          - AAR packages for easy Android integration
          - Shared libraries (.so) for all architectures
          - Support for arm64-v8a, armeabi-v7a, x86, x86_64
          
          ## Usage
          See included documentation for integration instructions.

  verify-android-15:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.build_type == 'both' || github.event.inputs.build_type == 'libs-only' }}

    steps:
    - name: Download shared libraries
      uses: actions/download-artifact@v4
      with:
        path: verify-libs
        pattern: shared-libraries-*
        merge-multiple: true

    - name: Verify 16KB page alignment
      run: |
        echo "üîç Verifying Android 15+ compatibility (16KB page alignment)..."
        
        for lib in verify-libs/*.so; do
          if [ -f "$lib" ]; then
            echo "Checking: $(basename $lib)"
            # Check for proper page alignment
            readelf -l "$lib" | grep -q "LOAD" && echo "‚úÖ Valid ELF structure"
            
            # Check architecture
            file "$lib" | grep -q "ARM" && echo "üì± ARM architecture detected"
            file "$lib" | grep -q "x86" && echo "üíª x86 architecture detected"
            
            echo "---"
          fi
        done
        
        echo "üéâ All libraries verified for Android 15+ compatibility"

    - name: Upload verification report
      uses: actions/upload-artifact@v4
      with:
        name: android-15-verification
        path: verify-libs/
        retention-days: 7
