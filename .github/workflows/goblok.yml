name: Android Native Build

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  NDK_VERSION: '25.2.9519653'

jobs:
  build:
    name: Build Android Libraries
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Setup Android NDK
      uses: android-actions/setup-android@v3
      with:
        ndk-version: ${{ env.NDK_VERSION }}

    - name: Build for all architectures
      run: |
        chmod +x build_android.sh
        ./build_android.sh

    - name: Test library compatibility
      run: |
        for arch in arm64-v8a armeabi-v7a x86 x86_64; do
          if [ -f "dist/$arch/libv2ray.so" ]; then
            echo "Testing $arch..."
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-readelf -l dist/$arch/libv2ray.so | grep "LOAD" || true
          fi
        done

    - name: Create build info
      run: |
        echo "Build Date: $(date)" > build-info.txt
        echo "Commit: ${{ github.sha }}" >> build-info.txt
        echo "Android NDK: ${{ env.NDK_VERSION }}" >> build-info.txt
        echo "Go Version: ${{ env.GO_VERSION }}" >> build-info.txt

    - name: List built files
      run: |
        echo "=== Built Libraries ==="
        find dist/ -name "*.so" -type f | head -20
        echo "=== Total files ==="
        find dist/ -name "*.so" -type f | wc -l

    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: android-libraries
        path: |
          dist/
          build-info.txt
        retention-days: 30

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release  # ‚Üê TAMBAHKAN ID
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/**/*.so
          build-info.txt
        draft: false
        prerelease: false
        generate_release_notes: true

    - name: Generate Download URLs
      if: startsWith(github.ref, 'refs/tags/')
      id: download_urls
      run: |
        # Get the first .so file as example
        FIRST_SO_FILE=$(find dist/ -name "*.so" -type f | head -1 | xargs basename)
        ARCH_DIR=$(find dist/ -name "*.so" -type f | head -1 | xargs dirname | xargs basename)
        
        echo "RELEASE_URL=https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "EXAMPLE_SO_URL=https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dist/$ARCH_DIR/$FIRST_SO_FILE" >> $GITHUB_OUTPUT
        echo "BUILD_INFO_URL=https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/build-info.txt" >> $GITHUB_OUTPUT
        
        # Count architectures
        ARCH_COUNT=$(find dist/ -maxdepth 1 -type d | grep -v "^dist$" | wc -l)
        echo "ARCHITECTURES=$ARCH_COUNT" >> $GITHUB_OUTPUT

    - name: Output Release Information
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        echo "üéâ ANDROID LIBRARIES RELEASED!"
        echo "==============================="
        echo "üì¶ Release Page: ${{ steps.download_urls.outputs.RELEASE_URL }}"
        echo ""
        echo "üèóÔ∏è Build Information:"
        echo "‚Ä¢ Android NDK: ${{ env.NDK_VERSION }}"
        echo "‚Ä¢ Go Version: ${{ env.GO_VERSION }}"
        echo "‚Ä¢ Architectures: ${{ steps.download_urls.outputs.ARCHITECTURES }}"
        echo ""
        echo "‚¨áÔ∏è DIRECT DOWNLOAD LINKS:"
        echo "‚Ä¢ Build Info: ${{ steps.download_urls.outputs.BUILD_INFO_URL }}"
        echo "‚Ä¢ Example Library ($(find dist/ -name "*.so" -type f | head -1 | xargs dirname | xargs basename)): ${{ steps.download_urls.outputs.EXAMPLE_SO_URL }}"
        echo ""
        echo "üìÅ Available Architectures:"
        for arch_dir in dist/*/; do
          if [ -d "$arch_dir" ]; then
            arch=$(basename "$arch_dir")
            so_file=$(find "$arch_dir" -name "*.so" -type f | head -1 | xargs basename)
            echo "  - $arch: https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dist/$arch/$so_file"
          fi
        done
        echo ""
        echo "üí° All libraries are available in the release assets above ‚Üë"
